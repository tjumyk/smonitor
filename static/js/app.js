// Generated by CoffeeScript 1.12.7
(function() {
  var app;

  app = angular.module('app', []);

  app.controller('MainController', [
    '$scope', '$http', '$timeout', function($scope, $http, $timeout) {
      var human_size, percent_level, process_status_message;
      human_size = function(size) {
        var unit_pos, units;
        units = ['B', 'KB', 'MB', 'GB', 'TB'];
        unit_pos = 0;
        while (size >= 1000 && unit_pos < units.length - 1) {
          size /= 1024.0;
          unit_pos += 1;
        }
        size = Math.round(size * 10) / 10;
        return "" + size + units[unit_pos];
      };
      percent_level = function(percent) {
        if (percent < 80) {
          return '';
        }
        if (percent < 90) {
          return 'warning';
        }
        return 'severe';
      };
      process_status_message = function(status) {
        status.memory.total_h = human_size(status.memory.total);
        status.disk.system.total_h = human_size(status.disk.system.total);
        if (status.disk.others) {
          status.disk.others.total_h = human_size(status.disk.others.total);
          status.disk.others.percent_h = status.disk.others.percent + '%';
        } else {
          status.disk.others = {
            total_h: 'N/A',
            percent_h: 'N/A'
          };
        }
        status.up_time = moment.unix(status.boot_time).toNow(true);
        status.cpu.percent_level = percent_level(status.cpu.percent);
        status.memory.percent_level = percent_level(status.memory.percent);
        status.disk.system.percent_level = percent_level(status.disk.system.percent);
        if (status.disk.others.total) {
          status.disk.others.percent_level = percent_level(status.disk.others.percent);
        }
        return status;
      };
      return $http.get('api/config').then(function(response) {
        var config, group, host, i, len, ref, results;
        $scope.config = config = response.data;
        config.site_title = config.site_name + ' \u00B7 System Monitor';
        if (config.mode === 'node') {
          config.host_groups = [];
        }
        ref = config.host_groups;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          group = ref[i];
          results.push((function() {
            var j, len1, ref1, results1;
            ref1 = group.hosts;
            results1 = [];
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              host = ref1[j];
              results1.push((function(host) {
                var socket;
                host.socket = socket = io("http://" + host.address + ":" + config.port);
                return socket.on('status', function(message) {
                  return $timeout(function() {
                    return host.status = process_status_message(message);
                  });
                });
              })(host));
            }
            return results1;
          })());
        }
        return results;
      });
    }
  ]);

}).call(this);

//# sourceMappingURL=app.js.map
